Python numpy基本操作   http://blog.csdn.net/Baoli1008/article/details/50531684
Python numpy笔记       https://www.zybuluo.com/chanvee/note/89078

## Tensorflow中，很多tf.**函数的用法与np十分相似

# ndarray.ndim  没有明白
# ndarray.tile()

* a = np.zeros((lines_num,rows_num)) 
    生产lines_num行，rows_num列值全为0的矩阵 (注：此时type仍旧是numpy.ndarray)

* a = np.ones((lines_num,rows_num)) 
    生产lines_num行，rows_num列值全为1的矩阵 (注：此时type仍旧是numpy.ndarray)

* a.shape
    得到矩阵a各维度元素数量

* np.arange(num)  // np.arange(最小值，最大值，步长) 左闭右开
eg. np.arange(6)
     >>> array([0, 1, 2, 3, 4, 5])
        np.arange(9,-1,-1)
     >>> array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])

* reshape(line,row) 设置矩阵形状
    eg. np.arange(6).reshape(2,3)
    >>> array([[0, 1, 2],
           [3, 4, 5]])

* np.linspace(最小值，最大值，元素数量) 生成均匀分布的array
    eg.  np.linspace(1,5,10)
   >>> array([1.        , 1.44444444, 1.88888889, 2.33333333, 2.77777778,
           3.22222222, 3.66666667, 4.11111111, 4.55555556, 5.        ])

*  b = np.asarray([1,3,4,6,4,2,5,10,8]).reshape(3,3)
    >>>array([[1, 3, 4],
           [6, 4, 2],
           [5, 10, 8]])

* np.argmax(array,axis=None,out=None) 
* np.argmin(array,axis=None,out=None)  out: if provieded, the result will be inserted into the array. It should be of the appropriate shpe and dtype.
    eg. np.argmax(array) 返回array中最大数的下标
        np.argmax(b)
    >>> 7

    eg. np.argmax(array,axis = 0)  # 返回每一列最大数的下标
     >>> array([1, 2, 2], dtype=int64)

    eg. np.argmax(array,axis = 1)  # 返回每一行最大数的下标
    >>> array([2, 0, 1], dtype=int64)


* np.transpose() # 转置矩阵
    eg. b = np.asarray([1,3,4,6,4,2,5,10,8]).reshape(3,3)
        np.transpose(b)
    >>> array([[ 1,  6,  5],
               [ 3,  4, 10],
               [ 4,  2,  8]])

* ndarray.size()  # 元素的总个数

* ndarray.ndim() # 数组轴的个数，在python中轴的个数被称为秩
  b = np.asarray([1,3,4,6,4,2,5,10,8]).reshape(3,3)
  b.ndim() # 求数组的维数

* np.tile()

* numpy.equal(x1,x2,out)
    eg. >>> np.equal([1,3,2],np.arange(3))
            array([False, False,  True]) # 对应相等的地方返回True，反之则返回False

* numpu.sum()
  eg. numpy.sum([[0,1,2],[2,1,3]],axis=1) # axis=1 每一行的全部元素相加
  >>> array（[3,6]）

  eg. numpy.sum([[0,1,2],[2,1,3]],axis=0) # axis=0 每一列的全部元素相加
  >>> array（2,2,5）


* tile函数
  eg. tile(1,2)
      >>> array([1, 1])
  eg. tile((1,2,3),3)
      >>>  array([1, 2, 3, 1, 2, 3, 1, 2, 3])
  eg. b=[1,3,5] 
     tile(b,[2,3])
       >>> array([[1, 3, 5, 1, 3, 5, 1, 3, 5],
                  [1, 3, 5, 1, 3, 5, 1, 3, 5]
                ])
  eg. a=[[1,2,3],[5,4]]
      tile(a,[2,3])
       >>> array([[[1, 2, 3], [5, 4], [1, 2, 3], [5, 4], [1, 2, 3], [5, 4]],
                [[1, 2, 3], [5, 4], [1, 2, 3], [5, 4], [1, 2, 3], [5, 4]]])


* numpy. argsort()
    eg. x = np.array([3, 1, 2])
         np.argsort(x)
    >>> array([1, 2, 0]) #  返回数组从小到大的索引值


    eg. x = np.array([[0, 3], [2, 2]])
        np.argsort(x, axis=0) #按列排序
    >>> array([[0, 1], [1, 0]])
    
     np.argsort(x, axis=1) #按行排序
    >>> array([[0, 1],[0, 1]])

* numpy.mat
   将目标数据的类型转化为矩阵matrix
   eg. a = [[1,2,3,],[2,4,6,],]
       myMat = numpy.mat(a)
    >>> matrix([[1,2,3],[2,4,6]]) #转化为了矩阵